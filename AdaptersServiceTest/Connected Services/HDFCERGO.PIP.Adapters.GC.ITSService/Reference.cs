//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HDFCERGO.PIP.Adapters.GC.ITSService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HDFCERGO.PIP.Adapters.GC.ITSService.ITSServiceSoap")]
    public interface ITSServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PolicyDetails_OSM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PolicyDetails_OSM(string Password, string PolicyXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PolicyDetails_OSM", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PolicyDetails_OSMAsync(string Password, string PolicyXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProposalValidationService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ProposalValidationService(string Password, string ProposalXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProposalValidationService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ProposalValidationServiceAsync(string Password, string ProposalXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FetchPaymentDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object FetchPaymentDetails(string Password, string PaymentIdXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FetchPaymentDetails", ReplyAction="*")]
        System.Threading.Tasks.Task<object> FetchPaymentDetailsAsync(string Password, string PaymentIdXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PolicyInformationService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PolicyInformationService(string Password, string PolicyXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PolicyInformationService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PolicyInformationServiceAsync(string Password, string PolicyXml);
        
        // CODEGEN: Generating message contract since the wrapper name (test) of message test does not match the default value (InwardUpdation)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        HDFCERGO.PIP.Adapters.GC.ITSService.test1 InwardUpdation(HDFCERGO.PIP.Adapters.GC.ITSService.test request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/test", ReplyAction="*")]
        System.Threading.Tasks.Task<HDFCERGO.PIP.Adapters.GC.ITSService.test1> InwardUpdationAsync(HDFCERGO.PIP.Adapters.GC.ITSService.test request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MultiplePolicyInformationService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MultiplePolicyInformationService(string Password, string PolicyXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MultiplePolicyInformationService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MultiplePolicyInformationServiceAsync(string Password, string PolicyXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fetchCustomerDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string fetchCustomerDetails(string Password, string strCustomerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/fetchCustomerDetails", ReplyAction="*")]
        System.Threading.Tasks.Task<string> fetchCustomerDetailsAsync(string Password, string strCustomerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Marine_Policy_InformationService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Marine_Policy_InformationService(string Policy_No, string Policy_Issuance_Date, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Marine_Policy_InformationService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Marine_Policy_InformationServiceAsync(string Policy_No, string Policy_Issuance_Date, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Marine_Policy_InformationService_New", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Marine_Policy_InformationService_New(string Policy_No, string Policy_Issuance_Date, string Declaration_No, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Marine_Policy_InformationService_New", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Marine_Policy_InformationService_NewAsync(string Policy_No, string Policy_Issuance_Date, string Declaration_No, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Validate_Reg_No", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Validate_Reg_No(int state_code, string reg_no);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Validate_Reg_No", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Validate_Reg_NoAsync(int state_code, string reg_no);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRenewalPolicyData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetRenewalPolicyData(string Password, string PolicyXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRenewalPolicyData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetRenewalPolicyDataAsync(string Password, string PolicyXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPaymetDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPaymetDetail(string Password, string PolicyXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPaymetDetail", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPaymetDetailAsync(string Password, string PolicyXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckRenewal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckRenewal(string PolicyNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckRenewal", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckRenewalAsync(string PolicyNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/POS_OUTSTANDING_DATA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string POS_OUTSTANDING_DATA(string IMD_CODE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/POS_OUTSTANDING_DATA", ReplyAction="*")]
        System.Threading.Tasks.Task<string> POS_OUTSTANDING_DATAAsync(string IMD_CODE);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="test", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class test
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string InwardXml;
        
        public test()
        {
        }
        
        public test(string Password, string InwardXml)
        {
            this.Password = Password;
            this.InwardXml = InwardXml;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="testResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class test1
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string testResult;
        
        public test1()
        {
        }
        
        public test1(string testResult)
        {
            this.testResult = testResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ITSServiceSoapChannel : HDFCERGO.PIP.Adapters.GC.ITSService.ITSServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class TSServiceSoapClient : System.ServiceModel.ClientBase<HDFCERGO.PIP.Adapters.GC.ITSService.ITSServiceSoap>, HDFCERGO.PIP.Adapters.GC.ITSService.ITSServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TSServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(TSServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), TSServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TSServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TSServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TSServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TSServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TSServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string PolicyDetails_OSM(string Password, string PolicyXml)
        {
            return base.Channel.PolicyDetails_OSM(Password, PolicyXml);
        }
        
        public System.Threading.Tasks.Task<string> PolicyDetails_OSMAsync(string Password, string PolicyXml)
        {
            return base.Channel.PolicyDetails_OSMAsync(Password, PolicyXml);
        }
        
        public string ProposalValidationService(string Password, string ProposalXml)
        {
            return base.Channel.ProposalValidationService(Password, ProposalXml);
        }
        
        public System.Threading.Tasks.Task<string> ProposalValidationServiceAsync(string Password, string ProposalXml)
        {
            return base.Channel.ProposalValidationServiceAsync(Password, ProposalXml);
        }
        
        public object FetchPaymentDetails(string Password, string PaymentIdXML)
        {
            return base.Channel.FetchPaymentDetails(Password, PaymentIdXML);
        }
        
        public System.Threading.Tasks.Task<object> FetchPaymentDetailsAsync(string Password, string PaymentIdXML)
        {
            return base.Channel.FetchPaymentDetailsAsync(Password, PaymentIdXML);
        }
        
        public string PolicyInformationService(string Password, string PolicyXml)
        {
            return base.Channel.PolicyInformationService(Password, PolicyXml);
        }
        
        public System.Threading.Tasks.Task<string> PolicyInformationServiceAsync(string Password, string PolicyXml)
        {
            return base.Channel.PolicyInformationServiceAsync(Password, PolicyXml);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        HDFCERGO.PIP.Adapters.GC.ITSService.test1 HDFCERGO.PIP.Adapters.GC.ITSService.ITSServiceSoap.InwardUpdation(HDFCERGO.PIP.Adapters.GC.ITSService.test request)
        {
            return base.Channel.InwardUpdation(request);
        }
        
        public string InwardUpdation(string Password, string InwardXml)
        {
            HDFCERGO.PIP.Adapters.GC.ITSService.test inValue = new HDFCERGO.PIP.Adapters.GC.ITSService.test();
            inValue.Password = Password;
            inValue.InwardXml = InwardXml;
            HDFCERGO.PIP.Adapters.GC.ITSService.test1 retVal = ((HDFCERGO.PIP.Adapters.GC.ITSService.ITSServiceSoap)(this)).InwardUpdation(inValue);
            return retVal.testResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<HDFCERGO.PIP.Adapters.GC.ITSService.test1> HDFCERGO.PIP.Adapters.GC.ITSService.ITSServiceSoap.InwardUpdationAsync(HDFCERGO.PIP.Adapters.GC.ITSService.test request)
        {
            return base.Channel.InwardUpdationAsync(request);
        }
        
        public System.Threading.Tasks.Task<HDFCERGO.PIP.Adapters.GC.ITSService.test1> InwardUpdationAsync(string Password, string InwardXml)
        {
            HDFCERGO.PIP.Adapters.GC.ITSService.test inValue = new HDFCERGO.PIP.Adapters.GC.ITSService.test();
            inValue.Password = Password;
            inValue.InwardXml = InwardXml;
            return ((HDFCERGO.PIP.Adapters.GC.ITSService.ITSServiceSoap)(this)).InwardUpdationAsync(inValue);
        }
        
        public string MultiplePolicyInformationService(string Password, string PolicyXml)
        {
            return base.Channel.MultiplePolicyInformationService(Password, PolicyXml);
        }
        
        public System.Threading.Tasks.Task<string> MultiplePolicyInformationServiceAsync(string Password, string PolicyXml)
        {
            return base.Channel.MultiplePolicyInformationServiceAsync(Password, PolicyXml);
        }
        
        public string fetchCustomerDetails(string Password, string strCustomerId)
        {
            return base.Channel.fetchCustomerDetails(Password, strCustomerId);
        }
        
        public System.Threading.Tasks.Task<string> fetchCustomerDetailsAsync(string Password, string strCustomerId)
        {
            return base.Channel.fetchCustomerDetailsAsync(Password, strCustomerId);
        }
        
        public string Marine_Policy_InformationService(string Policy_No, string Policy_Issuance_Date, string Password)
        {
            return base.Channel.Marine_Policy_InformationService(Policy_No, Policy_Issuance_Date, Password);
        }
        
        public System.Threading.Tasks.Task<string> Marine_Policy_InformationServiceAsync(string Policy_No, string Policy_Issuance_Date, string Password)
        {
            return base.Channel.Marine_Policy_InformationServiceAsync(Policy_No, Policy_Issuance_Date, Password);
        }
        
        public string Marine_Policy_InformationService_New(string Policy_No, string Policy_Issuance_Date, string Declaration_No, string Password)
        {
            return base.Channel.Marine_Policy_InformationService_New(Policy_No, Policy_Issuance_Date, Declaration_No, Password);
        }
        
        public System.Threading.Tasks.Task<string> Marine_Policy_InformationService_NewAsync(string Policy_No, string Policy_Issuance_Date, string Declaration_No, string Password)
        {
            return base.Channel.Marine_Policy_InformationService_NewAsync(Policy_No, Policy_Issuance_Date, Declaration_No, Password);
        }
        
        public string Validate_Reg_No(int state_code, string reg_no)
        {
            return base.Channel.Validate_Reg_No(state_code, reg_no);
        }
        
        public System.Threading.Tasks.Task<string> Validate_Reg_NoAsync(int state_code, string reg_no)
        {
            return base.Channel.Validate_Reg_NoAsync(state_code, reg_no);
        }
        
        public string GetRenewalPolicyData(string Password, string PolicyXml)
        {
            return base.Channel.GetRenewalPolicyData(Password, PolicyXml);
        }
        
        public System.Threading.Tasks.Task<string> GetRenewalPolicyDataAsync(string Password, string PolicyXml)
        {
            return base.Channel.GetRenewalPolicyDataAsync(Password, PolicyXml);
        }
        
        public string GetPaymetDetail(string Password, string PolicyXml)
        {
            return base.Channel.GetPaymetDetail(Password, PolicyXml);
        }
        
        public System.Threading.Tasks.Task<string> GetPaymetDetailAsync(string Password, string PolicyXml)
        {
            return base.Channel.GetPaymetDetailAsync(Password, PolicyXml);
        }
        
        public string CheckRenewal(string PolicyNo)
        {
            return base.Channel.CheckRenewal(PolicyNo);
        }
        
        public System.Threading.Tasks.Task<string> CheckRenewalAsync(string PolicyNo)
        {
            return base.Channel.CheckRenewalAsync(PolicyNo);
        }
        
        public string POS_OUTSTANDING_DATA(string IMD_CODE)
        {
            return base.Channel.POS_OUTSTANDING_DATA(IMD_CODE);
        }
        
        public System.Threading.Tasks.Task<string> POS_OUTSTANDING_DATAAsync(string IMD_CODE)
        {
            return base.Channel.POS_OUTSTANDING_DATAAsync(IMD_CODE);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ITSServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ITSServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ITSServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://115.113.35.240/ITsWebService/ITSService.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ITSServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://115.113.35.240/ITsWebService/ITSService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ITSServiceSoap,
            
            ITSServiceSoap12,
        }
    }
}
